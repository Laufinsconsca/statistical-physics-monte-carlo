import time
from os import makedirs
from os import path

import numpy as np
from validation import check_n_is_integer, check_M_relax_less_than_M
from populate_cube import populate_cube
from play_out_conditions import play_out_conditions
from functions import plot
from correlation_function import calculate_pair_correlation_function

if __name__ == '__main__':
    """
    МОДЕЛИРОВАНИЕ ПАРНОЙ КОРРЕЛЯЦИОННОЙ ФУНКЦИИ ДЛЯ АРГОНА В ЖИДКОМ СОСТОЯНИИ
    Краткое описание:
    Корреляционная функция показывает отношение концентрации на данном расстоянии к средней концентрации.
    Около нуля функция равна нулю, так как частицы не могут близко подойти друг к другу.
    При стремлении расстояния к бесконечности концентрация стремится к средней, поэтому отношение стремится к единице.
    """
    #  --------------------------- <общие константы> -------------------------------------------------------------------
    k = 1.38e-23  # постоянная Больцмана, Дж/К
    #  --------------------------- </общие константы> ------------------------------------------------------------------
    #  --------------------------- <константы задачи> ------------------------------------------------------------------
    N = 4 ** 3  # число частиц в одной ячейке (должно быть кубом натурального числа)
    M = 1000000  # количество разыгрываемых состояний
    r_min = 0.1  # начальный аргумент корреляционной функции
    h_r = 0.1  # шаг изменения аргумента корреляционной функции
    delta_r = 0.01  # толщина шарового слоя
    delta = 0.1  # константа рандомного сдвига
    M_relax = 999000  # количество отсеиваемых состояний (по умолчанию 1000)
    #  --------------------------- <параметры газа> --------------------------------------------------------------------
    temperature = 85  # температура газа, K
    mass = 39.948 * 1.660539e-27  # масса одной молекулы Ar, кг
    energy = 1.04e-2 * 1.6e-19  # характерная энергия задачи для Ar, Дж
    sigma = 3.4e-10  # характерный параметр длины Ar, м
    ro = 1401  # плотность жидкого Ar, кг/м^3
    #  --------------------------- </параметры газа> -------------------------------------------------------------------
    #  --------------------------- </константы задачи> -----------------------------------------------------------------
    #  --------------------------- <вычисляемые константы> -------------------------------------------------------------
    #  --------------------------- <валидация входных аргументов> ------------------------------------------------------
    N_coord = check_n_is_integer(N ** (1. / 3))  # количество частиц вдоль одной любой координаты
    check_M_relax_less_than_M(M, M_relax)
    #  --------------------------- </валидация входных аргументов> -----------------------------------------------------
    # (с проверкой на целочисленность)
    T0 = energy / k  # характерная температура задачи
    T_min = temperature / T0  # начальная температура расчёта
    T_max = temperature / T0  # конечная температура расчёта
    h_T = 0.1  # шаг изменения безразмерной температуры
    T = np.linspace(T_min, T_max, int((T_max - T_min)/h_r + 1))  # безразмерная температура
    n_concentration = ro / mass  # концентрация
    n = n_concentration * (sigma ** 3)  # безразмерная концентрация (sigma выступает в роли характерной длины задачи)
    V = N / n  # безразмерный объём
    L = V ** (1. / 3)  # безразмерная длина ребра ячейки моделирования
    r_max = L / 2  # конечный аргумент корреляционной функции (расстояние от центра до грани куба)
    r_number = int((r_max - r_min) / h_r + 1)  # количество разбиений интервала изменения аргумента
    # корреляционной функции
    r = np.linspace(r_min, r_max, r_number)  # аргумент корреляционной функции
    # --------------------------- </вычисляемые константы> -------------------------------------------------------------
    # --------------------------- <вычисляем корреляционнную функцию> --------------------------------------------------
    pair_corr_func = np.zeros((len(T), int(r_number)))  # инициализируем массив с корреляционной функцией
    for i in range(len(T)):
        print("Начат расчёт при T = " + str(T[i]*T0) + " K")
        start_time = time.time()
        molecules_ensemble = np.zeros((M - M_relax, N, 3))  # содержит положения всех частиц во всех состояниях
        molecules_ensemble[0] = populate_cube(N_coord, L / N_coord)  # заполняем куб частицами (начальное расположение)
        #  --------------------------- <разыгрываем состояния> ---------------------------------------------------------
        molecules_ensemble = play_out_conditions(molecules_ensemble, M, M_relax, N, delta, L, T[i])
        print("Состояния разыграны")
        #  --------------------------- </разыгрываем состояния> --------------------------------------------------------
        pair_corr_func[i] = calculate_pair_correlation_function(molecules_ensemble, r, delta_r, L, n)
        end_time = time.time()
        #  --------------------------- <сохраняем массив с корреляционной функцией> ------------------------------------
        folder_name = "corr_func_arrays/M=" + str(M) + "/N=" + str(N)
        if not path.exists(folder_name):
            makedirs(folder_name)
        np.save(folder_name + "/corr_func M=" + str(M) + ", N=" + str(N) + ", T=" + str(T[i]), pair_corr_func[i])
        #  --------------------------- </сохраняем массив с корреляционной функцией> -----------------------------------
        print("Время расчёта t = " + time.strftime("%H:%M:%S", time.gmtime(end_time - start_time)) + " чч:мм:cc " +
              str(int(1000*(end_time - start_time - int(end_time - start_time)))) + " мс")
        print("Расчёт при T = " + str(T[i]*T0) + " K завершён")
    # --------------------------- </вычисляем корреляционнную функцию> -------------------------------------------------
    # --------------------------- <строим корреляционнную функцию> -----------------------------------------------------
    for i in range(len(T)):
        plot(r, pair_corr_func[i], "g(r*), парная корреляционная функция при T = " + str(T[i] * T0) + " K",
             "r*", "g(r*)")
    # --------------------------- </строим корреляционнную функцию> ----------------------------------------------------
